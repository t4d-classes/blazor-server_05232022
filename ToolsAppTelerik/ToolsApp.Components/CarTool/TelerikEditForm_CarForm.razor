<TelerikForm Model="@carForm" OnValidSubmit="@doSubmitForm">
  <FormValidation>
    <DataAnnotationsValidator />
    <ValidationSummary />
  </FormValidation>

  <FormItems>
    <FormItem>
      <Template>
          <label for="year">Year:</label>
          <TelerikNumericTextBox Format="G" Min="1886" Max="2022"
            @bind-Value="@carForm.Year"></TelerikNumericTextBox>
          <TelerikValidationMessage For="@(() => carForm.Year)" />             
      </Template>      
    </FormItem>
    <FormItem>
        <Template>
            <label for="price">Price:</label>
            <TelerikNumericTextBox Format="C" Min="0m" Decimals="2" Step="0.01m"
              @bind-Value="@carForm.Price"></TelerikNumericTextBox>               
            <TelerikValidationMessage For="@(() => carForm.Price)" />             
        </Template>
    </FormItem>
  </FormItems>

</TelerikForm>


@code {

  private CarFormModel carForm = new();

  [Parameter]
  public string ButtonText { get; set; } = "Submit Car";

  [Parameter]
  public EventCallback<NewCar> OnSubmitForm { get; set; }


  private async Task doSubmitForm() {

    await OnSubmitForm.InvokeAsync(new NewCar {
      Make=carForm.Make,
      Model=carForm.Model,
      Year=carForm.Year,
      Color=carForm.Color,
      Price=carForm.Price,
    });

    carForm = new();
  }

  public class CarFormModel
  {
    [Required]
    [Editable(false)]
    public string Make { get; set; } = "";

    [Required]
    public string Model { get; set; } = "";
  
    [Required]
    [MinYear]
    public int Year { get; set; } = 1900;

    [Required]
    [Display(Name="Exterior Color")]
    public string Color { get; set; } = "";

    [Required]
    [Range(typeof(Decimal), "0", "1000000000",
      ErrorMessage = "The price cannot be less than zero.")]
    public decimal Price { get; set; } = 0;
  }
}