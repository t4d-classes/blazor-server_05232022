<EditForm Model="@carForm" OnValidSubmit="@doSubmitForm">

  <DataAnnotationsValidator />
  <ValidationSummary />

  <label>
    Make:
    <InputText @bind-Value="carForm.Make" />
    <ValidationMessage For=@(() => carForm.Make) style="display:inline;" />
  </label>

  <label>
    Model:
    <InputText @bind-Value="carForm.Model" />
    <ValidationMessage For=@(() => carForm.Model) style="display:inline;" />
  </label>

  <label>
    Year:
    <InputNumber @bind-Value="carForm.Year" />
    <ValidationMessage For=@(() => carForm.Year) style="display:inline;" />
  </label>

  <label>
    Color:
    <InputText @bind-Value="carForm.Color" />
    <ValidationMessage For=@(() => carForm.Color) style="display:inline;" />
  </label>

  <label>
    Price:
    <InputNumber @bind-Value="carForm.Price" />
    <ValidationMessage For=@(() => carForm.Price) style="display:inline;" />
  </label>

  <button>@ButtonText</button>

</EditForm>


@code {

  private CarFormModel carForm = new();

  [Parameter]
  public string ButtonText { get; set; } = "Submit Car";

  [Parameter]
  public EventCallback<NewCar> OnSubmitForm { get; set; }


  private async Task doSubmitForm() {

    await OnSubmitForm.InvokeAsync(new NewCar {
      Make=carForm.Make,
      Model=carForm.Model,
      Year=carForm.Year,
      Color=carForm.Color,
      Price=carForm.Price,
    });

    carForm = new();
  }

  public class CarFormModel
  {
    [Required]
    public string Make { get; set; } = "";

    [Required]
    public string Model { get; set; } = "";
  
    [Required]
    [MinYear]
    public int Year { get; set; } = 1900;

    [Required]
    public string Color { get; set; } = "";

    [Required]
    [Range(typeof(Decimal), "0", "1000000000",
      ErrorMessage = "The price cannot be less than zero.")]
    public decimal Price { get; set; } = 0;
  }
}