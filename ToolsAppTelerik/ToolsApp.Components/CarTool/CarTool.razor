@page "/car-tool"

@inject ICarsData carsData
@inject IScreenBlocker screenBlocker
@inject IAlert alert
@inject IJSRuntime JS

<ToolHeader HeaderText="Car Tool" />

<CarTable Cars="@cars" EditCarId="@editCarId"
  OnEditCar="doEditCar" OnDeleteCar="doConfirmDeleteCar"
  OnSaveCar="doSaveCar" OnCancelCar="doCancelCar" />

<CarForm ButtonText="Add Car" OnSubmitForm="doAddCar" />

<TelerikDialog @bind-Visible="@showConfirmDeleteCar" Title="Confirm Delete" CloseOnOverlayClick="false">
  <DialogContent>
    Are you sure you want to delete the car?
  </DialogContent>
  <DialogButtons>
    <TelerikButton OnClick="doDeleteCar">Yes</TelerikButton>
    <TelerikButton OnClick="doCancelDeleteCar">No</TelerikButton>
  </DialogButtons>
</TelerikDialog>

@code {

  private bool showConfirmDeleteCar { get; set; } = false;

  private IEnumerable<ICar> cars = new List<ICar>();

  private int editCarId = -1;
  private int pendingDeleteCarId = -1;
  private bool _firstRender = true;


  protected async override Task OnParametersSetAsync()
  {
    // subsequent renders are in the browser (not static prerendering) and
    // have access to JavaScript
    if (!_firstRender) {
      await refreshCars();
    }
  }    

  protected async override Task OnAfterRenderAsync(bool firstRender)
  {
    // run the JS code after the first render to avoid prerendering error
    if (firstRender) {
      _firstRender = false;
      @* await JS.InvokeVoidAsync("app.setTitle", "Car Tool"); *@
      await refreshCars();
      StateHasChanged();
    }
  }


  private async Task refreshCars()
  {
    await screenBlocker.BlockScreen();
    cars = await carsData.All();
    editCarId = -1;
    await screenBlocker.UnblockScreen();
  }  

  private void doEditCar(int carId)
  {
    editCarId = carId;
  }

  private void doCancelCar()
  {
    editCarId = -1;
  }

  private async Task doAddCar(INewCar car) {
    await carsData.Append(car);
    await refreshCars();
    await alert.Notify("Car added!");
  }

  private async Task doSaveCar(ICar car)
  {
    await carsData.Replace(car);
    await refreshCars();
  }

  private void doConfirmDeleteCar(int carId) {
    showConfirmDeleteCar = true;
    pendingDeleteCarId = carId;
  }

  private async Task doDeleteCar() {
    await carsData.Remove(pendingDeleteCarId);
    await refreshCars();
    doCloseConfirmDeleteCar();
  }

  private void doCancelDeleteCar() {
    doCloseConfirmDeleteCar();
  }

  private void doCloseConfirmDeleteCar() {
    showConfirmDeleteCar = false;
    pendingDeleteCarId = -1;
  }

}
