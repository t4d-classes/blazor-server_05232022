@page "/color-tool"

@inject IColorsData colorsData
@inject IScreenBlocker screenBlocker
@inject IJSRuntime JS

<ToolHeader HeaderText="Color Tool" />

<button type="button" id="refresh-colors-button">Refresh Colors</button>

<ColorList Colors="@colors" OnDeleteColor="deleteColor" />

<ColorForm ButtonText="Add Color" OnSubmitForm="addColor" />

@code {

  private IEnumerable<IColor> colors = new List<IColor>();

  private bool _firstRender = true;

  private DotNetObjectReference<IColorsData> colorsDataRef;

  protected async override Task OnParametersSetAsync()
  {
    // subsequent renders are in the browser (not static prerendering) and
    // have access to JavaScript
    if (!_firstRender) {
      await refreshColors();
    }
  }    

  protected async override Task OnAfterRenderAsync(bool firstRender)
  {
    colorsDataRef = DotNetObjectReference.Create(colorsData);

    // run the JS code after the first render to avoid prerendering error
    if (firstRender) {
      _firstRender = false;
      await JS.InvokeVoidAsync("app.setupColorsRefresh", colorsDataRef);
      await JS.InvokeVoidAsync("app.setTitle", "Color Tool");
      await refreshColors();
      StateHasChanged();
    }
  }

  private async Task refreshColors()
  {
    await screenBlocker.BlockScreen();
    colors = await colorsData.All();
    await Task.Delay(1000);
    await screenBlocker.UnblockScreen();
  }

  private async Task addColor(NewColor color) {
    await colorsData.Append(color);
    colors = await colorsData.All();
  }

  private async Task deleteColor(int colorId) {
    if (await JS.InvokeAsync<bool>(
      "confirm",
      "Are you sure you want to delete the color?")) {

      await colorsData.Remove(colorId);
      colors = await colorsData.All();
    }

  }
}