@using ToolsApp.Core.Interfaces.Models

<tr>
  <td>@Car?.Id</td>
  <td><input type="text" @bind="carForm.Make" /></td>
  <td><input type="text" @bind="carForm.Model" /></td>
  <td><input type="number" @bind="carForm.Year" /></td>
  <td><input type="text" @bind="carForm.Color" /></td>
  <td><input type="number" @bind="carForm.Price" /></td>
  <td>
    <button type="button" @onclick="doSaveCar">Save</button>
    <button type="button" @onclick="doCancelCar">Cancel</button>
  </td>
</tr>

@code {

  private CarFormModel carForm = new();


  [Parameter]
  public ICar Car { get; set; } = null;

  [Parameter]
  public EventCallback<ICar> OnSaveCar { get; set; }


  [Parameter]
  public EventCallback OnCancelCar { get; set; }

  protected override void OnInitialized()
  {
    if (Car is not null) {
      carForm = new() {
        Make = Car.Make ?? "",
        Model = Car.Model ?? "",
        Year = Car.Year,
        Color = Car.Color ?? "",
        Price = Car.Price
      };
    }
  }

  private async Task doSaveCar()
  {
    if (Car is not null)
    {
      await OnSaveCar.InvokeAsync(new Car {
        Id=Car.Id,
        Make=carForm.Make,
        Model=carForm.Model,
        Year=carForm.Year,
        Color=carForm.Color,
        Price=carForm.Price,
      } as ICar);
    }
  }

  private async Task doCancelCar()
  {
    await OnCancelCar.InvokeAsync();
  }

  class CarFormModel {
    public string Make { get; set; } = "";
    public string Model { get; set; } = "";
    public int Year { get; set; } = 1900;
    public string Color { get; set; } = "";
    public decimal Price { get; set; } = 0;
  }  
}
